                                  Методы строк
.isalpha()                                    #проверка буква ли в строке
.isdigit()                                    #проверка числа ли в строке
.split()                                      #разделить строку по символу(указывается в скобках) в список
.rstrip()                                     #удалить пробелы справа
Для замены по подстроке в очень крупных строках, лучше(с точки зрения производительности) перобразовать ее в список.

              Функции стандартные
dir()                                         #Возращает список всех атрибутов(методов объекта)
help(str.split)                               #Вызов справки по методу объекта (без скобок)



'''               '''                         #Вывод многострочного текста, удобно для отключения части кода
open(r'C:\PP\new...', ...)                    #Пропускать управляющие конструкции вроде \n и \t
                                  Методы списков
.pop()                                        #Удаление элекметна из середины списка, аналогично удяляет оператор del (del L[1])
.insert(,)                                    #Вставить в определенную позицию
.remove()                                     #Удаить элемент по значению
.extend()                                     #Добавляет в конец разбитую по символам строку как множество элементов

                                  Списковые включения
[a[1] for a in M]                             #Выборка из матрицы M стобец 2
[[x,x,x] for x in (range(1, 8))]              #Структура с вложенными списками

Спиковые включения в круглых скобках это генераторы(выдают результат каждый раз по запросу), в фигурных - множество

                                  Производительность
Модули time и timeit - измерение скорости
Модуль profile - устранение узких мест 0_о

                                  Кортеж
Можно указывать без круглых скобокб прим. T = 'spam', 4, 'fffd'


                                  Десятичные числа с фиксированной точностью
import decimal


                                  Определение типа объекта
L = []
type(L)
<class 'list'>
                                  Числовые операторы
num = 9
print(num.bit_length())                      #Количество бит нужное для записи числа

                                  Рандом
import random
random.random()                                    #случайное число между 0 и 1.0\
random.randint(x,y)                                #случайное число в диапозоне между x и у
lis = [x, y, z]
random.chice(lis)                                  #случайный элемент из списка x или y или z
random.shuffle(lis)                                #перемешивает элементы списка и выдает все в случайном порядке
                                  Множества
Множества позволяют очень быстро находить пересечения, расхождения, уникальные объекты и т.д.
Множества не могу содержать внутри себя словари и списки(изменяемые объекты) но кортежи можно

                                  Форматирование
'%s, %s' % ('hoho','huhu')                         #Выражения форматирования проще
'{0} and {1}'.format('hoho', 'huhu')               #Может выводить коды двоичных типов
                                  Общие моменты
print('g', end= ' ')                               #Не переходить на новую строку, полезно в циклах
                                  Словари
D.get('key',90)                                       #Можно проверять есть ли такой ключ или нет, если обратиться на несуществующий будет ошибка
                                                      #90 - любое значение которое может вернуть метод если ключ не найден
D.pop('key')                                          #метод поп возвращает значение словаря по ключу которы удаляет

                                  Логические и побитовые операторы

x = {'s', 'p', 'a', 'm'}
y = {'h', 'a', 'm'}
x & y                                                 #Пересечение
{'m', 'a'}
x | y                                                 #Объединение
{'m', 'h', 'a', 'p', 's'}
x - y                                                 #Разность
{'s', 'p'}
x > y                                                 #Надмножество
False

                                  Функции преобразования
str()                                                 #Строка
dict()                                                #Словарь
tuple()                                               #Кортеж
list()                                                #Список
set()                                                 #Множество
                                  Модуль os
os.path.isfile                                        #проверка есть ли файл
os.path.exists                                        #проверка есть ли файл или директория с таким названием
